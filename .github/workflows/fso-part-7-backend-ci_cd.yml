name: CI/CD Pipeline for back-end part of Part 7 of FSO Course - Project BlogApp

on:
  push:
    branches: [main, part-11/task-11.20/optimize-ci-cd]
    paths:
      - 'Part-7/blog/backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'Part-7/blog/backend/**'
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      audit_needed: ${{ steps.audit_flag.outputs.audit_needed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            deps_changed:
              - 'Part-7/blog/backend/package.json'
              - 'Part-7/blog/backend/package-lock.json'

      - name: Set audit flag
        id: audit_flag
        run: echo "audit_needed=${{ steps.filter.outputs.deps_changed }}" >> $GITHUB_OUTPUT

  ci-checks:
    needs: changes
    uses: ./.github/workflows/reusable-express-backend-ci.yml
    with:
      working-directory: Part-7/blog/backend
      node-versions: '["18","22"]'
      audit-needed: ${{ needs.changes.outputs.audit_needed }}
    secrets:
      TEST_MONGODB_URI: ${{ secrets.TEST_MONGODB_URI }}
      TEST_SECRET: ${{ secrets.TEST_JWT_SECRET }}

  tag-generate:
    needs: ci-checks
    uses: ./.github/workflows/reusable-tag-generate.yml
    with:
      should-deploy: ${{ needs.ci-checks.outputs.should_deploy }}
      tag-prefix: blogapp-backend-

  fly-deploy:
    needs: [ci-checks, tag-generate]
    if: needs['tag-generate'].outputs.new_tag != ''
    uses: ./.github/workflows/reusable-fly-deploy.yml
    with:
      should-deploy: ${{ needs.ci-checks.outputs.should_deploy }}
      working-directory: Part-7/blog/backend
      image-label: ${{ needs['tag-generate'].outputs.new_tag }}
    secrets:
      FLY_API_TOKEN: ${{ secrets.FLY_FSO_BLOGAPP_TOKEN }}

  tag-push:
    needs: [fly-deploy, tag-generate]
    if: >
      needs.fly-deploy.result == 'success' &&
      needs.tag-generate.result == 'success' &&
      needs.tag-generate.outputs.new_tag != ''
    uses: ./.github/workflows/reusable-tag-push.yml
    with:
      tag-to-push: ${{ needs.tag-generate.outputs.new_tag }}

  health-check:
    needs: fly-deploy
    if: needs.fly-deploy.result == 'success'
    uses: ./.github/workflows/reusable-health-check.yml
    with:
      url: https://blogs-fso.fly.dev/ready

  notify:
    # must run even if some previous jobs failed, so that we can notify about failures
    if: ${{ always() }}
    needs: [ci-checks, tag-generate, fly-deploy, health-check, tag-push]
    uses: ./.github/workflows/reusable-deploy-notify.yml
    with:
      project-name: 'FSO BlogApp Express Backend'
      should-deploy: ${{ needs.ci-checks.outputs.should_deploy }}
      new-tag: ${{ needs['tag-generate'].outputs.new_tag }}
      # success logic: deploy intended -> all deploy-stage jobs succeeded
      is-success: >-
        ${{ 
          needs.ci-checks.outputs.should_deploy == 'true' &&
          needs.ci-checks.result == 'success' &&
          needs['tag-generate'].result == 'success' &&
          needs.fly-deploy.result == 'success' &&
          needs['health-check'].result == 'success' &&
          needs['tag-push'].result == 'success'
        }}
      statuses-text: |
        Job statuses:
        • CI-checks:       ${{ needs.ci-checks.result }}
        • Tag-generate:    ${{ needs['tag-generate'].result }}
        • Fly deploy:      ${{ needs.fly-deploy.result }}
        • Health (/ready): ${{ needs['health-check'].result }}
        • Tag-push:        ${{ needs['tag-push'].result }}
    secrets:
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}